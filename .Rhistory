A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
plot(fit)
plot(fit,t=x)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
plot(fit,t=x)
plot(fit,t=x)
plot(fit)
fit
?plot.gcss
plot(fit)
plot(fit,t=x)
?plot
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
plot(fit,t=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
plot(fit,t=x)
library(CubicSmoothingSplines)
help("gcv.alpha")
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
fit<-gcss(Y,A)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
plot(fit,t=x)
fit
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
plot(fit,t=x)
?xlab
?plot
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,x=x)
plot(fit,t=x)
plot(fit,t=x,xlab="Time (days)")
plot(fit,t=x,xlab="Time (days)", ylab="\eqn{Gtilde}")
plot(fit,t=x,xlab="Time (days)", ylab=\eqn{Gtilde})
plot(fit,t=x,xlab="Time (days)", ylab="Ghat")
plot(fit,t=x,xlab="Time (days)", ylab="alpha")
plot(fit,t=x,xlab="Time (days)", ylab="\alpha")
plot(fit,t=x,xlab="Time (days)", ylab="alpha")
ylab<-expression(paste("Phase Angle ", phi))
plot(fit,t=x,xlab="Time (days)", ylab=ylab)
ylab<-expression(hat(G))
plot(fit,t=x,xlab="Time (days)", ylab=ylab)
ylab<-"Gtilde"
plot(fit,t=x,xlab="Time (days)", ylab=ylab)
plot(fit,t=x,xlab="Time (days)", ylab="Gtilde")
library(CubicSmoothingSplines)
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
x<-seq(from=30,by=30,length=12)
fit<-gcss(Y,A,t=x)
plot(fit,t=x,xlab="Time (days)", ylab="Gtilde")
fit
?optimise
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
setwd("~/Dropbox/Work-files/Papers/Manuscripts/Rao/R")
mulli<-read.table("../Data/mulli66c_imputed.dat",header=FALSE)
mulli[,13]
table(mulli[,13])
A<-cbind(rep(c(1,0),times=c(40,168)),rep(c(0,1),times=c(40,168)))
A
Y<-t(mulli[,-13])
dim(Y)
dim(A)
library(CubicSmoothingSplines)
?roughness
roughness(1:4)
# Matriisi Nabla
nabla<-function(x)
{
h <- diff(x)
q <- length(x)
m <- matrix(nr = q, nc = (q - 2), data = c(0))
for (i in 1:(q - 2)) {
m[i, i] <- 1/h[i]
}
for (i in 1:(q - 2)) {
m[i + 1, i] <- ((1/h[i]) + (1/h[i + 1])) * -1
}
for (i in 1:(q - 2)) {
m[i + 2, i] <- 1/h[i + 1]
}
m
}
# Matriisi Delta
delta<-function(x)
{
h <- diff(x)
q <- length(x)
m <- matrix(nr = q - 2, nc = q - 2, data = c(0))
for (i in 1:(q - 2)) {
m[i, i] <- (h[i] + h[i + 1])/3
}
for (i in 1:(q - 3)) {
m[i, (i + 1)] <- h[i + 1]/6
}
for (i in 1:(q - 3)) {
m[(i + 1), i] <- h[i + 1]/6
}
m
}
# Roughness matriisi
Kq<-function(x)
{
Nabla<-nabla(x)
Delta<-delta(x)
Nabla%*%solve(Delta)%*%t(Nabla)
}
KK<-Kq(1:4)
KK
apply(KK,2,sum)
setwd("~/Dropbox/Work-files/Papers/Publications/Nummi_Mottonen_Tuomisto-2017/Manuscript/R")
# Matriisi Nabla
nabla<-function(x)
{
h <- diff(x)
q <- length(x)
m <- matrix(nr = q, nc = (q - 2), data = c(0))
for (i in 1:(q - 2)) {
m[i, i] <- 1/h[i]
}
for (i in 1:(q - 2)) {
m[i + 1, i] <- ((1/h[i]) + (1/h[i + 1])) * -1
}
for (i in 1:(q - 2)) {
m[i + 2, i] <- 1/h[i + 1]
}
m
}
# Matriisi Delta
delta<-function(x)
{
h <- diff(x)
q <- length(x)
m <- matrix(nr = q - 2, nc = q - 2, data = c(0))
for (i in 1:(q - 2)) {
m[i, i] <- (h[i] + h[i + 1])/3
}
for (i in 1:(q - 3)) {
m[i, (i + 1)] <- h[i + 1]/6
}
for (i in 1:(q - 3)) {
m[(i + 1), i] <- h[i + 1]/6
}
m
}
# Roughness matriisi
Kq<-function(x)
{
Nabla<-nabla(x)
Delta<-delta(x)
Nabla%*%solve(Delta)%*%t(Nabla)
}
# sovitetut arvot
hat<-function(y, A, S)
{
print(length(y))
pa <- A %*% solve(t(A) %*% A) %*% t(A)
(pa %x% S) %*% y
}
# Cross-validation kriteeri alphan valintaan
gcvm<-function(alpha,Y=Y,t=t,A=A)
{
q<-length(t)
m<-ncol(A)
K<-Kq(t)
y<-as.vector(Y)
S<-solve(diag(q)+alpha*K)
yh<-hat(y,A,S)
edf<-sum(diag(S))
mean((y-yh)^2)/(1-m*edf/(n*q))^2
}
# cross-validation kriteeri sarakkeiden lukumäärän valintaan
gcvm2<-function(c, Y, t, A)
{
q <- length(t)
n<-ncol(Y)
m<-ncol(A)
K <- Kq(t)
y<-as.vector(Y)
eigK <- eigen(K)
M <- eigK$vectors[, q:1]
edf <- m*c
Mc <- M[, 1:c]
yh <- hat(y, A, Mc%*%t(Mc))
nq <- n*q
mean((y-yh)^2)/(1-edf/(n*q))^2
}
# Ominaisvektorit K-matriisista
estimate<-function(Y, t, A)
{
l <- 2
u <- length(t)
#c <- 1 + trunc(optimise(gcvm2,c(l,(u-1.1)),Y=Y,t=t,A=A)$min)
c <- trunc(optimise(gcvm2,c(l,(u-1.1)),Y=Y,t=t,A=A)$min)
K <- Kq(t)
eigK <- eigen(K)
m <- eigK$vectors[, u:1]
m[, 1] <- 1/sqrt(u)
m[, 2] <- (t - mean(t))/(((u - 1) * var(t))^0.5)
m <- m[, 1:c]
list(m=m,c=c)
}
##======================================##
## Pressure data                        ##
##======================================##
Pressure<-read.table("Pressure.dat",header = TRUE)
dim(Pressure)
names(Pressure)
id<-Pressure$id
y<-Pressure$y
Pressure<-Pressure[order(y,id),]
Y<-cbind.data.frame(Pressure[1:95,2:21],Pressure[191:285,2:21],Pressure[286:380,2:21])
Y<-t(Y)
dim(Y)
x<-c(0,1,2,3,4,5,6,9,10,11,12,15,16,17,18,19,20,21,22,23)
id<-Pressure[1:95,1]
group<-Pressure[1:95,23]
dependent<-Pressure[,22]
q<-length(x); q
n<-ncol(Y); n
s<-nrow(Y)/q; s
grp1<-as.numeric(group==1)
grp2<-as.numeric(group==2)
A<-cbind(grp1,grp2)
dim(A)
A
Y1<-Y[1:20,]
Y2<-Y[21:40,]
Y3<-Y[41:60,]
alpha<-NULL
mingcv<-NULL
#####################################################
# alpha1
#####################################################
optgcv<-optimise(gcvm,c(0.01,1),Y=Y1,t=x,A=A,tol=1.0e-4)
alpha[1]<-optgcv$minimum ; alpha[1]
mingcv[1]<-optgcv$objective ; mingcv[1]
alp<-seq(0.01,1,length=100)
gcv<-NULL
for(i in 1:100)
{
gcv[i]<-gcvm(alp[i],Y=Y1,t=x,A=A)
print(i)
}
plot(alp,gcv,type="l",col="red")
abline(v=alpha[1],lty=2)
abline(h=mingcv[1],lty=2)
#####################################################
# alpha2
#####################################################
optgcv<-optimise(gcvm,c(0.01,1),Y=Y2,t=x,A=A,tol=1.0e-4)
alpha[2]<-optgcv$minimum ; alpha[2]
mingcv[2]<-optgcv$objective ; mingcv[2]
alp<-seq(0.01,1,length=100)
gcv<-NULL
for(i in 1:100)
{
gcv[i]<-gcvm(alp[i],Y=Y2,t=x,A=A)
print(i)
}
plot(alp,gcv,type="l",col="red")
abline(v=alpha[2],lty=2)
abline(h=mingcv[2],lty=2)
#####################################################
# alpha3
#####################################################
optgcv<-optimise(gcvm,c(0.01,1),Y=Y3,t=x,A=A,tol=1.0e-4)
alpha[3]<-optgcv$minimum ; alpha[3]
mingcv[3]<-optgcv$objective ; mingcv[3]
alp<-seq(0.01,1,length=100)
gcv<-NULL
for(i in 1:100)
{
gcv[i]<-gcvm(alp[i],Y=Y3,t=x,A=A)
print(i)
}
plot(alp,gcv,type="l",col="red")
abline(v=alpha[3],lty=2)
abline(h=mingcv[3],lty=2)
K<-Kq(x)
S1<-solve(diag(q)+alpha[1]*K)
S2<-solve(diag(q)+alpha[2]*K)
S3<-solve(diag(q)+alpha[3]*K)
c<-NULL
MM<-estimate(Y1,x,A)
c[1]<-MM$c
M1<-MM$m
MM<-estimate(Y2,x,A)
c[2]<-MM$c
M2<-MM$m
MM<-estimate(Y3,x,A)
c[3]<-MM$c
M3<-MM$m
P1<-M1%*%t(M1)
P2<-M2%*%t(M2)
P3<-M3%*%t(M3)
Omegahat<-rbind(t(M1)%*%Y1,t(M2)%*%Y2,t(M3)%*%Y3)%*%A%*%solve(t(A)%*%A)
C1<-cbind(0,diag(c[1]-1))
C2<-cbind(0,diag(c[2]-1))
C3<-cbind(0,diag(c[3]-1))
dim(C1)
dim(C2)
dim(C3)
C<-matrix(0,31,34)
C[1:11,1:12]<-C1
C[12:20,13:22]<-C2
C[21:31,23:34]<-C3
dim(C)
c
D<-c(1,-1)
Q1<-t(D)%*%solve(t(A)%*%A)%*%D
Q2<-C%*%Omegahat%*%D
Q<-sum(diag(solve(Q1)%*%t(Q2)%*%Q2))
s21<-(1/(n*(q-c[1])))*sum(diag(t(Y1)%*%(diag(q)-P1)%*%Y1))
s22<-(1/(n*(q-c[2])))*sum(diag(t(Y2)%*%(diag(q)-P2)%*%Y2))
s23<-(1/(n*(q-c[3])))*sum(diag(t(Y3)%*%(diag(q)-P3)%*%Y3))
s2<-s21+s22+s23; s2
df1<-nrow(C); df1
df2<-n*(s*q-sum(c)); df2
F<-(Q/df1)/s2 ; F
1-pf(F,df1,df2)
library(cowplot)
dat1<-data.frame(SBP=c(Y[1:20,]),time=rep(x,95),id=factor(rep(id,each=20)),group=factor(rep(group,each=20)))
plot1 <- ggplot(dat1, aes(x=time, y=SBP, group=id)) + geom_line(aes(linetype=group,color=group))
library(ggplot2)
dat1<-data.frame(SBP=c(Y[1:20,]),time=rep(x,95),id=factor(rep(id,each=20)),group=factor(rep(group,each=20)))
plot1 <- ggplot(dat1, aes(x=time, y=SBP, group=id)) + geom_line(aes(linetype=group,color=group))
dat2<-data.frame(DPB=c(Y[21:40,]),time=rep(x,95),id=factor(rep(id,each=20)),group=factor(rep(group,each=20)))
plot2 <- ggplot(dat2, aes(x=time, y=DPB, group=id)) + geom_line(aes(linetype=group,color=group))
dat3<-data.frame(HR=c(Y[41:60,]),time=rep(x,95),id=factor(rep(id,each=20)),group=factor(rep(group,each=20)))
plot3 <- ggplot(dat3, aes(x=time, y=HR, group=id)) + geom_line(aes(linetype=group,color=group))
plot_grid(plot1,plot2,plot3, ncol = 1, nrow = 3)
df1<-nrow(C); df1
df2<-n*(s*q-sum(c)); df2
alpha
c
C
Q
df1
df2
s2
